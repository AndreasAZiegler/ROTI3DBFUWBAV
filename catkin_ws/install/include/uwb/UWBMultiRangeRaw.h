// Generated by gencpp from file uwb/UWBMultiRangeRaw.msg
// DO NOT EDIT!


#ifndef UWB_MESSAGE_UWBMULTIRANGERAW_H
#define UWB_MESSAGE_UWBMULTIRANGERAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uwb
{
template <class ContainerAllocator>
struct UWBMultiRangeRaw_
{
  typedef UWBMultiRangeRaw_<ContainerAllocator> Type;

  UWBMultiRangeRaw_()
    : header()
    , num_of_units(0)
    , address(0)
    , remote_address(0)
    , timestamp_master_request_1_recv(0)
    , timestamp_slave_reply_send(0)
    , timestamp_master_request_2_recv(0)
    , timestamp_master_request_1()
    , timestamp_slave_reply()
    , timestamp_master_request_2()  {
    }
  UWBMultiRangeRaw_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_of_units(0)
    , address(0)
    , remote_address(0)
    , timestamp_master_request_1_recv(0)
    , timestamp_slave_reply_send(0)
    , timestamp_master_request_2_recv(0)
    , timestamp_master_request_1(_alloc)
    , timestamp_slave_reply(_alloc)
    , timestamp_master_request_2(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_of_units_type;
  _num_of_units_type num_of_units;

   typedef uint8_t _address_type;
  _address_type address;

   typedef uint8_t _remote_address_type;
  _remote_address_type remote_address;

   typedef int64_t _timestamp_master_request_1_recv_type;
  _timestamp_master_request_1_recv_type timestamp_master_request_1_recv;

   typedef int64_t _timestamp_slave_reply_send_type;
  _timestamp_slave_reply_send_type timestamp_slave_reply_send;

   typedef int64_t _timestamp_master_request_2_recv_type;
  _timestamp_master_request_2_recv_type timestamp_master_request_2_recv;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _timestamp_master_request_1_type;
  _timestamp_master_request_1_type timestamp_master_request_1;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _timestamp_slave_reply_type;
  _timestamp_slave_reply_type timestamp_slave_reply;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _timestamp_master_request_2_type;
  _timestamp_master_request_2_type timestamp_master_request_2;




  typedef boost::shared_ptr< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> const> ConstPtr;

}; // struct UWBMultiRangeRaw_

typedef ::uwb::UWBMultiRangeRaw_<std::allocator<void> > UWBMultiRangeRaw;

typedef boost::shared_ptr< ::uwb::UWBMultiRangeRaw > UWBMultiRangeRawPtr;
typedef boost::shared_ptr< ::uwb::UWBMultiRangeRaw const> UWBMultiRangeRawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uwb::UWBMultiRangeRaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uwb

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'uwb': ['/data/SP1/catkin_ws/src/uwb/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86220690a868e2b487d423fe45af1477";
  }

  static const char* value(const ::uwb::UWBMultiRangeRaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86220690a868e2b4ULL;
  static const uint64_t static_value2 = 0x87d423fe45af1477ULL;
};

template<class ContainerAllocator>
struct DataType< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uwb/UWBMultiRangeRaw";
  }

  static const char* value(const ::uwb::UWBMultiRangeRaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 num_of_units\n\
uint8 address\n\
uint8 remote_address\n\
int64 timestamp_master_request_1_recv\n\
int64 timestamp_slave_reply_send\n\
int64 timestamp_master_request_2_recv\n\
int64[] timestamp_master_request_1\n\
int64[] timestamp_slave_reply\n\
int64[] timestamp_master_request_2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::uwb::UWBMultiRangeRaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_of_units);
      stream.next(m.address);
      stream.next(m.remote_address);
      stream.next(m.timestamp_master_request_1_recv);
      stream.next(m.timestamp_slave_reply_send);
      stream.next(m.timestamp_master_request_2_recv);
      stream.next(m.timestamp_master_request_1);
      stream.next(m.timestamp_slave_reply);
      stream.next(m.timestamp_master_request_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UWBMultiRangeRaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uwb::UWBMultiRangeRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uwb::UWBMultiRangeRaw_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_of_units: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_of_units);
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "remote_address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remote_address);
    s << indent << "timestamp_master_request_1_recv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_master_request_1_recv);
    s << indent << "timestamp_slave_reply_send: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_slave_reply_send);
    s << indent << "timestamp_master_request_2_recv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_master_request_2_recv);
    s << indent << "timestamp_master_request_1[]" << std::endl;
    for (size_t i = 0; i < v.timestamp_master_request_1.size(); ++i)
    {
      s << indent << "  timestamp_master_request_1[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.timestamp_master_request_1[i]);
    }
    s << indent << "timestamp_slave_reply[]" << std::endl;
    for (size_t i = 0; i < v.timestamp_slave_reply.size(); ++i)
    {
      s << indent << "  timestamp_slave_reply[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.timestamp_slave_reply[i]);
    }
    s << indent << "timestamp_master_request_2[]" << std::endl;
    for (size_t i = 0; i < v.timestamp_master_request_2.size(); ++i)
    {
      s << indent << "  timestamp_master_request_2[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.timestamp_master_request_2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UWB_MESSAGE_UWBMULTIRANGERAW_H
