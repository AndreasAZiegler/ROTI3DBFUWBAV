// Generated by gencpp from file uwb/UWBRangeStats.msg
// DO NOT EDIT!


#ifndef UWB_MESSAGE_UWBRANGESTATS_H
#define UWB_MESSAGE_UWBRANGESTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uwb
{
template <class ContainerAllocator>
struct UWBRangeStats_
{
  typedef UWBRangeStats_<ContainerAllocator> Type;

  UWBRangeStats_()
    : header()
    , address(0)
    , remote_address(0)
    , stamp_us(0)
    , round_trip_time(0.0)
    , range(0.0)
    , std_noise()
    , preamble_acc_count()
    , first_path_index()
    , first_path_amp_1()
    , first_path_amp_2()
    , first_path_amp_3()
    , channel_impulse_response_power()
    , prf()  {
      std_noise.assign(0);

      preamble_acc_count.assign(0);

      first_path_index.assign(0);

      first_path_amp_1.assign(0);

      first_path_amp_2.assign(0);

      first_path_amp_3.assign(0);

      channel_impulse_response_power.assign(0);

      prf.assign(0);
  }
  UWBRangeStats_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , address(0)
    , remote_address(0)
    , stamp_us(0)
    , round_trip_time(0.0)
    , range(0.0)
    , std_noise()
    , preamble_acc_count()
    , first_path_index()
    , first_path_amp_1()
    , first_path_amp_2()
    , first_path_amp_3()
    , channel_impulse_response_power()
    , prf()  {
      std_noise.assign(0);

      preamble_acc_count.assign(0);

      first_path_index.assign(0);

      first_path_amp_1.assign(0);

      first_path_amp_2.assign(0);

      first_path_amp_3.assign(0);

      channel_impulse_response_power.assign(0);

      prf.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _address_type;
  _address_type address;

   typedef uint8_t _remote_address_type;
  _remote_address_type remote_address;

   typedef uint32_t _stamp_us_type;
  _stamp_us_type stamp_us;

   typedef float _round_trip_time_type;
  _round_trip_time_type round_trip_time;

   typedef float _range_type;
  _range_type range;

   typedef boost::array<uint16_t, 3>  _std_noise_type;
  _std_noise_type std_noise;

   typedef boost::array<uint16_t, 3>  _preamble_acc_count_type;
  _preamble_acc_count_type preamble_acc_count;

   typedef boost::array<uint16_t, 3>  _first_path_index_type;
  _first_path_index_type first_path_index;

   typedef boost::array<uint16_t, 3>  _first_path_amp_1_type;
  _first_path_amp_1_type first_path_amp_1;

   typedef boost::array<uint16_t, 3>  _first_path_amp_2_type;
  _first_path_amp_2_type first_path_amp_2;

   typedef boost::array<uint16_t, 3>  _first_path_amp_3_type;
  _first_path_amp_3_type first_path_amp_3;

   typedef boost::array<uint16_t, 3>  _channel_impulse_response_power_type;
  _channel_impulse_response_power_type channel_impulse_response_power;

   typedef boost::array<uint16_t, 3>  _prf_type;
  _prf_type prf;




  typedef boost::shared_ptr< ::uwb::UWBRangeStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uwb::UWBRangeStats_<ContainerAllocator> const> ConstPtr;

}; // struct UWBRangeStats_

typedef ::uwb::UWBRangeStats_<std::allocator<void> > UWBRangeStats;

typedef boost::shared_ptr< ::uwb::UWBRangeStats > UWBRangeStatsPtr;
typedef boost::shared_ptr< ::uwb::UWBRangeStats const> UWBRangeStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uwb::UWBRangeStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uwb::UWBRangeStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uwb

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'uwb': ['/data/SP1/catkin_ws/src/uwb/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uwb::UWBRangeStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb::UWBRangeStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb::UWBRangeStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb::UWBRangeStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb::UWBRangeStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb::UWBRangeStats_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uwb::UWBRangeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6ca04d144ef745d3c9c8be35d4fa277";
  }

  static const char* value(const ::uwb::UWBRangeStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6ca04d144ef745dULL;
  static const uint64_t static_value2 = 0x3c9c8be35d4fa277ULL;
};

template<class ContainerAllocator>
struct DataType< ::uwb::UWBRangeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uwb/UWBRangeStats";
  }

  static const char* value(const ::uwb::UWBRangeStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uwb::UWBRangeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 address\n\
uint8 remote_address\n\
uint32 stamp_us\n\
float32 round_trip_time\n\
float32 range\n\
uint16[3] std_noise\n\
uint16[3] preamble_acc_count\n\
uint16[3] first_path_index\n\
uint16[3] first_path_amp_1\n\
uint16[3] first_path_amp_2\n\
uint16[3] first_path_amp_3\n\
uint16[3] channel_impulse_response_power\n\
uint16[3] prf\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::uwb::UWBRangeStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uwb::UWBRangeStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.address);
      stream.next(m.remote_address);
      stream.next(m.stamp_us);
      stream.next(m.round_trip_time);
      stream.next(m.range);
      stream.next(m.std_noise);
      stream.next(m.preamble_acc_count);
      stream.next(m.first_path_index);
      stream.next(m.first_path_amp_1);
      stream.next(m.first_path_amp_2);
      stream.next(m.first_path_amp_3);
      stream.next(m.channel_impulse_response_power);
      stream.next(m.prf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UWBRangeStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uwb::UWBRangeStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uwb::UWBRangeStats_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "remote_address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remote_address);
    s << indent << "stamp_us: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.stamp_us);
    s << indent << "round_trip_time: ";
    Printer<float>::stream(s, indent + "  ", v.round_trip_time);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "std_noise[]" << std::endl;
    for (size_t i = 0; i < v.std_noise.size(); ++i)
    {
      s << indent << "  std_noise[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.std_noise[i]);
    }
    s << indent << "preamble_acc_count[]" << std::endl;
    for (size_t i = 0; i < v.preamble_acc_count.size(); ++i)
    {
      s << indent << "  preamble_acc_count[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.preamble_acc_count[i]);
    }
    s << indent << "first_path_index[]" << std::endl;
    for (size_t i = 0; i < v.first_path_index.size(); ++i)
    {
      s << indent << "  first_path_index[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.first_path_index[i]);
    }
    s << indent << "first_path_amp_1[]" << std::endl;
    for (size_t i = 0; i < v.first_path_amp_1.size(); ++i)
    {
      s << indent << "  first_path_amp_1[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.first_path_amp_1[i]);
    }
    s << indent << "first_path_amp_2[]" << std::endl;
    for (size_t i = 0; i < v.first_path_amp_2.size(); ++i)
    {
      s << indent << "  first_path_amp_2[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.first_path_amp_2[i]);
    }
    s << indent << "first_path_amp_3[]" << std::endl;
    for (size_t i = 0; i < v.first_path_amp_3.size(); ++i)
    {
      s << indent << "  first_path_amp_3[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.first_path_amp_3[i]);
    }
    s << indent << "channel_impulse_response_power[]" << std::endl;
    for (size_t i = 0; i < v.channel_impulse_response_power.size(); ++i)
    {
      s << indent << "  channel_impulse_response_power[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.channel_impulse_response_power[i]);
    }
    s << indent << "prf[]" << std::endl;
    for (size_t i = 0; i < v.prf.size(); ++i)
    {
      s << indent << "  prf[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.prf[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UWB_MESSAGE_UWBRANGESTATS_H
