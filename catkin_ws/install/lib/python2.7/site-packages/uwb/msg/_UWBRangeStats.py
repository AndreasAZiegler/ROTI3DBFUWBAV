# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uwb/UWBRangeStats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UWBRangeStats(genpy.Message):
  _md5sum = "b6ca04d144ef745d3c9c8be35d4fa277"
  _type = "uwb/UWBRangeStats"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint8 address
uint8 remote_address
uint32 stamp_us
float32 round_trip_time
float32 range
uint16[3] std_noise
uint16[3] preamble_acc_count
uint16[3] first_path_index
uint16[3] first_path_amp_1
uint16[3] first_path_amp_2
uint16[3] first_path_amp_3
uint16[3] channel_impulse_response_power
uint16[3] prf

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','address','remote_address','stamp_us','round_trip_time','range','std_noise','preamble_acc_count','first_path_index','first_path_amp_1','first_path_amp_2','first_path_amp_3','channel_impulse_response_power','prf']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint32','float32','float32','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,address,remote_address,stamp_us,round_trip_time,range,std_noise,preamble_acc_count,first_path_index,first_path_amp_1,first_path_amp_2,first_path_amp_3,channel_impulse_response_power,prf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UWBRangeStats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.address is None:
        self.address = 0
      if self.remote_address is None:
        self.remote_address = 0
      if self.stamp_us is None:
        self.stamp_us = 0
      if self.round_trip_time is None:
        self.round_trip_time = 0.
      if self.range is None:
        self.range = 0.
      if self.std_noise is None:
        self.std_noise = [0,0,0]
      if self.preamble_acc_count is None:
        self.preamble_acc_count = [0,0,0]
      if self.first_path_index is None:
        self.first_path_index = [0,0,0]
      if self.first_path_amp_1 is None:
        self.first_path_amp_1 = [0,0,0]
      if self.first_path_amp_2 is None:
        self.first_path_amp_2 = [0,0,0]
      if self.first_path_amp_3 is None:
        self.first_path_amp_3 = [0,0,0]
      if self.channel_impulse_response_power is None:
        self.channel_impulse_response_power = [0,0,0]
      if self.prf is None:
        self.prf = [0,0,0]
    else:
      self.header = std_msgs.msg.Header()
      self.address = 0
      self.remote_address = 0
      self.stamp_us = 0
      self.round_trip_time = 0.
      self.range = 0.
      self.std_noise = [0,0,0]
      self.preamble_acc_count = [0,0,0]
      self.first_path_index = [0,0,0]
      self.first_path_amp_1 = [0,0,0]
      self.first_path_amp_2 = [0,0,0]
      self.first_path_amp_3 = [0,0,0]
      self.channel_impulse_response_power = [0,0,0]
      self.prf = [0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BI2f.pack(_x.address, _x.remote_address, _x.stamp_us, _x.round_trip_time, _x.range))
      buff.write(_struct_3H.pack(*self.std_noise))
      buff.write(_struct_3H.pack(*self.preamble_acc_count))
      buff.write(_struct_3H.pack(*self.first_path_index))
      buff.write(_struct_3H.pack(*self.first_path_amp_1))
      buff.write(_struct_3H.pack(*self.first_path_amp_2))
      buff.write(_struct_3H.pack(*self.first_path_amp_3))
      buff.write(_struct_3H.pack(*self.channel_impulse_response_power))
      buff.write(_struct_3H.pack(*self.prf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.address, _x.remote_address, _x.stamp_us, _x.round_trip_time, _x.range,) = _struct_2BI2f.unpack(str[start:end])
      start = end
      end += 6
      self.std_noise = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.preamble_acc_count = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.first_path_index = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.first_path_amp_1 = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.first_path_amp_2 = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.first_path_amp_3 = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.channel_impulse_response_power = _struct_3H.unpack(str[start:end])
      start = end
      end += 6
      self.prf = _struct_3H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BI2f.pack(_x.address, _x.remote_address, _x.stamp_us, _x.round_trip_time, _x.range))
      buff.write(self.std_noise.tostring())
      buff.write(self.preamble_acc_count.tostring())
      buff.write(self.first_path_index.tostring())
      buff.write(self.first_path_amp_1.tostring())
      buff.write(self.first_path_amp_2.tostring())
      buff.write(self.first_path_amp_3.tostring())
      buff.write(self.channel_impulse_response_power.tostring())
      buff.write(self.prf.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.address, _x.remote_address, _x.stamp_us, _x.round_trip_time, _x.range,) = _struct_2BI2f.unpack(str[start:end])
      start = end
      end += 6
      self.std_noise = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.preamble_acc_count = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.first_path_index = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.first_path_amp_1 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.first_path_amp_2 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.first_path_amp_3 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.channel_impulse_response_power = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.prf = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3H = struct.Struct("<3H")
_struct_2BI2f = struct.Struct("<2BI2f")
